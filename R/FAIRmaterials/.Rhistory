write_json(x = json_results,path = "../../../topics/PV_Backsheets_demo/JsonFiles/test.json")
# save to the folder
write_json(x = fairfied_measurments[[1]],
path = "../../../topics/PV_Backsheets_demo/JsonFiles/manual_output.json")
View(json_results)
write(x = json_results,file = "../../../topics/PV_Backsheets_demo/JsonFiles/manual_output.json")
library(FAIRmaterials)
measurments <- read.csv("../../../data/PVrwb_tidy.csv")
FTIR <- read.csv("../../../data/PVrwb_FTIR.csv")
Raman <- read.csv("../../../data/PVrwb_Raman.csv")
head(measurments)
head(FTIR)
head(Raman)
measurments<- measurments %>%
dplyr::select(-Gloss60,-Gloss20,-Gloss85)
FTIR <- FTIR %>%
dplyr::select(-Gloss60,-Gloss20,-Gloss85)
Raman <- Raman %>%
dplyr::select(-Gloss60,-Gloss20,-Gloss85)
measurments_unit<-data.frame(ExposureTime="hour")
fairfied_measurments <- fairify_data(dataframe = measurments[,],unit_dataframe = measurments_unit, domain = 'photovoltaicBacksheet', saveLocal = T)
# output json results
json_results<-jsonlite::fromJSON(fairfied_measurments[[1]])
# output json results
json_results<-jsonlite::fromJSON(fairfied_measurments)
json_results<-map(fairfied_measurments,jsonlite::fromJSON)
View(json_results)
json_results[[1]]
fairfied_measurments[[1]]
fairfied_measurments[[1]] %>% head()
library(FAIRmaterials)
measurments <- read.csv("../../../data/PVrwb_tidy.csv")
library(FAIRmaterials)
# load_all()
library(dplyr)
library(purrr)
library(jsonlite)
library(FAIRmaterials)
measurments <- read.csv("../../../data/PVrwb_tidy.csv")
library(FAIRmaterials)
measurments <- read.csv("../../../data/PVrwb_tidy.csv")
FTIR <- read.csv("../../../data/PVrwb_FTIR.csv")
Raman <- read.csv("../../../data/PVrwb_Raman.csv")
head(measurments)
head(FTIR)
head(Raman)
# remove the columns has the number
measurments<- measurments %>%
dplyr::select(-Gloss60,-Gloss20,-Gloss85)
# customized the unit
measurments_unit<-data.frame(ExposureTime="hour")
# We can FAIRify the data straight from the csv files
fairfied_measurments <- fairify_data(dataframe = measurments[,],unit_dataframe = measurments_unit, domain = 'photovoltaicBacksheet', saveLocal = F)
#json checking
jsonlite::validate(fairfied_measurments[[1]])
any(purrr::map(fairfied_measurments,jsonlite::validate)==T)
# output json results
json_results<-map(fairfied_measurments,jsonlite::fromJSON)
View(json_results)
View(FTIR)
View(fairfied_measurments)
fairfied_measurments[[1]]
View(measurments)
View(json_results)
measurments_unit<-data.frame(ExposureTime="hour",CellSizeX="mm")
fairfied_measurments <- fairify_data(dataframe = measurments[1,],unit_dataframe = measurments_unit, domain = 'photovoltaicBacksheet', saveLocal = F)
View(fairfied_measurments)
# output json results
json_results<-map(fairfied_measurments,jsonlite::fromJSON)
View(fairfied_measurments)
View(json_results)
library(FAIRmaterials)
measurments <- read.csv("../../../data/PVrwb_tidy.csv")
FTIR <- read.csv("../../../data/PVrwb_FTIR.csv")
Raman <- read.csv("../../../data/PVrwb_Raman.csv")
head(measurments)
head(FTIR)
head(Raman)
View(FTIR)
View(measurments)
library(FAIRmaterials)
measurments <- read.csv("../../../data/PVrwb_tidy.csv")
FTIR <- read.csv("../../../data/PVrwb_FTIR.csv")
Raman <- read.csv("../../../data/PVrwb_Raman.csv")
head(measurments)
head(FTIR)
head(Raman)
fairfied_measurments <- fairify_data(dataframe = measurments[1,],unit_dataframe = measurments_unit, domain = 'photovoltaicBacksheet', saveLocal = F)
# remove the columns has the number
measurments<- measurments %>%
dplyr::select(-Gloss60,-Gloss20,-Gloss85)
# output json results
json_results<-map(fairfied_measurments,jsonlite::fromJSON)
View(fairfied_measurments)
View(json_results)
measurments_unit<-data.frame(ExposureTime="hour")
fairfied_measurments <- fairify_data(dataframe = measurments[1,],unit_dataframe = measurments_unit, domain = 'photovoltaicBacksheet', saveLocal = F)
# output json results
json_results<-map(fairfied_measurments,jsonlite::fromJSON)
gc()
library(devtools)
library(devtools)
library(tools)
install.packages("devtools")
library(devtools)
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::load_all()
#install.packages("FAIRmaterials")
library(FAIRmaterials)
devtools::load_all()
# Convert .rda files to CSV and process the CSV files in the PV folder
example_folder <- system.file("extdata", "PV", package = "FAIRmaterials")
example_folder
system.file("extdata", "PV", package = "FAIRmaterials")
#convert_rda_to_csv(example_folder, example_folder)
FAIRmaterials::process_ontology_files(example_folder, update_missing = FALSE)
library(FAIRmaterials)
#install.packages("FAIRmaterials")
library(FAIRmaterials)
# Process the CSV files in the PV folder
example_folder <- system.file("extdata", "PV", package = "FAIRmaterials")
example_folder
FAIRmaterials::process_ontology_files(example_folder, update_missing = FALSE)
# Process the CSV files in the PV folder
example_folder <- system.file("extdata", "PV", package = "FAIRmaterials")
system.file("extdata", "PV", package = "FAIRmaterials")
?system.file
# Process the CSV files in the PV folder
example_folder <- pkgload::system.file("extdata", "PV", package = "FAIRmaterials")
# Process the CSV files in the PV folder
example_folder <- pkgload::shim_system.file("extdata", "PV", package = "FAIRmaterials")
library(pkgload)
# Process the CSV files in the PV folder
example_folder <- pkgload::shim_system.file("extdata", "PV", package = "FAIRmaterials")
# Process the CSV files in the PV folder
example_folder <- base::system.file("extdata", "PV", package = "FAIRmaterials")
example_folder
base::system.file("extdata", "PV", package = "FAIRmaterials")
base::system.file("PV", package = "FAIRmaterials")
# Process the CSV files in the PV folder
example_folder <- base::system.file("extdata" package = "FAIRmaterials")
base::system.file("extdata", package = "FAIRmaterials")
base::system.file("data", package = "FAIRmaterials")
base::system.file("data/PV", package = "FAIRmaterials")
base::system.file("PV", package = "FAIRmaterials")
base::system.file("~/data/PV", package = "FAIRmaterials")
# Process the CSV files in the PV folder
example_folder <- base::system.file(c("data","PV"), package = "FAIRmaterials")
example_folder
base::system.file(c("data","PV") , package = "FAIRmaterials")
# Process the CSV files in the PV folder
example_folder <- base::system.file(c("data", package = "FAIRmaterials")
base::system.file(c("data", package = "FAIRmaterials")
base::system.file("data", package = "FAIRmaterials")
example_folder1 <- paste0(example_folder, "/PV")
example_folder1
FAIRmaterials::process_ontology_files(example_folder1, update_missing = FALSE)
# Process the CSV files in the PV folder
example_folder <- base::system.file("data", package = "FAIRmaterials")
FAIRmaterials::process_ontology_files(example_folder, update_missing = FALSE)
# Process the CSV files in the PV folder
data("FAIRSheetInput - RelationshipDefinitions.csv", package = "FAIRmaterials")
convert_rda_to_csv(example_folder2, example_folder2)
FAIRmaterials::convert_rda_to_csv(example_folder2, example_folder2)
if (dir.exists(example_folder)) {
files <- list.files(example_folder)}
example_folder <- "inst/extdata/PV"
if (dir.exists(example_folder)) {
files <- list.files(example_folder)}
dir.exists(example_folder)
example_folder
base::system.file("inst/extdata/PV", package = "FAIRmaterials")
example_folder <- base::system.file("data", package = "FAIRmaterials")
example_folder
FAIRmaterials::process_ontology_files(example_folder, update_missing = FALSE)
list.files(example_folder)
example_folder
install.packages("FAIRmaterials")
library(FAIRmaterials)
install.packages("FAIRmaterials")
system.file("extdata", "PV", package = "FAIRmaterials")
system.file("extdata", package = "FAIRmaterials")
system.file("data", package = "FAIRmaterials")
system.file("PV", package = "FAIRmaterials")
system.file("Xray", package = "FAIRmaterials")
# Process the CSV files in a PV folder
example_folder <- "path/to/example/PVData"
FAIRmaterials::process_ontology_files(example_folder, update_missing = FALSE)
?str_match
?setNames
?complete.cases
?read_csv
?read.csv
read.csv()
?read_csv
?str_length
?tail
# Create the inst/extdata directory
dir.create("inst/extdata", recursive = TRUE, showWarnings = FALSE)
# Move CSV files from data to inst/extdata
file.copy(list.files("data", pattern = "\\.csv$", full.names = TRUE), "inst/extdata", overwrite = TRUE)
# Optionally, remove the CSV files from the original location
file.remove(list.files("data", pattern = "\\.csv$", full.names = TRUE))
# Move CSV files from data to inst/extdata
file.copy(list.files("data", pattern = "\\.csv$", full.names = TRUE), "inst/extdata", overwrite = TRUE)
# Optionally, remove the CSV files from the original location
file.remove(list.files("data", pattern = "\\.csv$", full.names = TRUE))
system.file("extdata", "Xray", package = "FAIRmaterials")
library(FAIRmaterials)
system.file("extdata", "Xray", package = "FAIRmaterials")
example_folder2 <- system.file("extdata", "Xray", package = "FAIRmaterials")
process_ontology_files(example_folder2, update_missing = FALSE)
library(devtools)
system.file("extdata", "PV", package = "FAIRmaterials")
system.file("extdata", "PV", package = "FAIRmaterials")
system.file("PV", package = "FAIRmaterials")
system.file("extdata", "XRay", package = "FAIRmaterials")
library(FAIRmaterials)
library(FAIRmaterials)
system.file("PV", package = "FAIRmaterials")
system.file("PV", package = "FAIRmaterials")
system.file("extdata", "PV", package = "FAIRmaterials")
system.file("extdata", package = "FAIRmaterials")
process_ontology_files("~/Users/jgordon/Downloads/rstudio-export/untitled folder", update_missing = TRUE, include_valuetype = FALSE)
process_ontology_files("~/Users/jgordon/Downloads/rstudio-export/untitledfolder", update_missing = TRUE, include_valuetype = FALSE)
process_ontology_files("~/Users/jgordon/Downloads/rstudio-export/untitledfolder", update_missing = TRUE, include_valuetype = FALSE)
process_ontology_files("/Users/jgordon/Downloads/rstudio-export/untitledfolder", update_missing = TRUE, include_valuetype = FALSE)
process_ontology_files("/Users/jgordon/Downloads/rstudio-export/untitledfolder", update_missing = FALSE, include_valuetype = FALSE)
library(FAIRmaterials)
process_ontology_files("/Users/jgordon/Downloads/rstudio-export/untitledfolder", update_missing = FALSE, include_valuetype = FALSE)
library(FAIRmaterials)
process_ontology_files("/Users/jgordon/Downloads/rstudio-export/untitledfolder", update_missing = FALSE, include_valuetype = FALSE)
library(FAIRmaterials)
library(FAIRmaterials)
process_ontology_files("/Users/jgordon/Downloads/rstudio-export/untitledfolder", update_missing = FALSE, include_valuetype = FALSE)
process_ontology_files("/Users/jgordon/Downloads/rstudio-export/untitledfolder", update_missing = FALSE, include_valuetype = TRUE)
process_ontology_files("/Users/jgordon/Downloads/rstudio-export/untitledfolder", update_missing = TRUE, include_valuetype = FALSE)
process_ontology_files("/Users/jgordon/Library/CloudStorage/OneDrive-BowdoinCollege/Desktop/ontfolder/XRay", update_missing = TRUE, include_valuetype = FALSE)
process_ontology_files("/Users/jgordon/Library/CloudStorage/OneDrive-BowdoinCollege/Desktop/ontfolder/XRay", update_missing = F, include_valuetype = FALSE)
process_ontology_files("/Users/jgordon/Downloads/rstudio-export/untitledfolder", update_missing = F, include_valuetype = T)
process_ontology_files("/Users/jgordon/Downloads/rstudio-export/untitledfolder", update_missing = F, include_valuetype = T, mergeTitle = "MERGED PV and XRay", mergeURL = "https://cwrusdle.bitbucket.io/OntologyFilesOwl/Ontology/", mergeVersion = "1.0")
library(FAIRmaterials)
library(FAIRmaterials)
process_ontology_files("/Users/jgordon/Downloads/rstudio-export/untitledfolder", update_missing = F, include_valuetype = FALSE)
library(FAIRmaterials)
process_ontology_files("/Users/jgordon/Downloads/rstudio-export/untitledfolder", update_missing = F, include_valuetype = FALSE)
?expect_identical
system.file("extdata", "PV", package = "FAIRmaterials")
library(devtools)
devtools::check(args = "--as-cran")
urlchecker::url_check()
devtools::check(
manual = TRUE,
remote = TRUE,
incoming = TRUE
)
rhub::check(
env_vars = c(
"_R_CHECK_CRAN_INCOMING_REMOTE_" = "true",
"_R_CHECK_CRAN_INCOMING_" = "true"
)
)
library(rhub)
install.packages("rhub")
library(rhub)
rhub::check(
env_vars = c(
"_R_CHECK_CRAN_INCOMING_REMOTE_" = "true",
"_R_CHECK_CRAN_INCOMING_" = "true"
)
)
rhubv2::check(
env_vars = c(
"_R_CHECK_CRAN_INCOMING_REMOTE_" = "true",
"_R_CHECK_CRAN_INCOMING_" = "true"
)
)
rhub::check(
env_vars = c(
"_R_CHECK_CRAN_INCOMING_REMOTE_" = "true",
"_R_CHECK_CRAN_INCOMING_" = "true"
),
platform = "windows-x86_64-devel"
)
devtools::check(
manual = TRUE,
remote = TRUE,
incoming = TRUE
)
library(FAIRmaterials)
devtools::check(
manual = TRUE,
remote = TRUE,
incoming = TRUE
)
devtools::check(
manual = TRUE,
remote = TRUE,
incoming = TRUE
)
devtools::check(
manual = TRUE,
remote = TRUE,
incoming = TRUE
)
devtools::check(
manual = TRUE,
remote = TRUE,
incoming = TRUE
)
devtools::check(
manual = TRUE,
remote = TRUE,
incoming = TRUE
)
devtools::check(
manual = TRUE,
remote = TRUE,
incoming = TRUE
)\
devtools::check(
manual = TRUE,
remote = TRUE,
incoming = TRUE
)\
devtools::check(
manual = TRUE,
remote = TRUE,
incoming = TRUE
)
?rdf_add
devtools::check(
manual = TRUE,
remote = TRUE,
incoming = TRUE
)
devtools::check(
manual = TRUE,
remote = TRUE,
incoming = TRUE
)
system.file("extdata", "PV", package = "FAIRmaterials")
devtools::check(
manual = TRUE,
remote = TRUE,
incoming = TRUE
)
devtools::check(
manual = TRUE,
remote = TRUE,
incoming = TRUE
)
devtools::check(args = "--as-cran")
devtools::check(
manual = TRUE,
remote = TRUE,
incoming = TRUE
)
rhub::check_for_cran(platform = "windows-x86_64-devel")
#You can also check against multiple platforms at once:
rhub::check_on(platforms = c("ubuntu-gcc-release", "fedora-clang-devel"))
?rhubv2
rc_list_local_tokens()
rc_new_token()
urlchecker::url_check()
devtools::check_desc()
check_desc()
library(devtools)
check_desc()
check()
devtools::check_win_release()
devtools::check_win_release()
devtools::check(
manual = TRUE,
remote = TRUE,
incoming = TRUE
)
spell_check()
spell_check()
spell_check()
spell_check()
spell_check()
devtools::check(
manual = TRUE,
remote = TRUE,
incoming = TRUE
)
devtools::check(
manual = TRUE,
remote = TRUE,
incoming = TRUE
)
devtools::check_win_release()
devtools::check_win_release()
devtools::check(
manual = TRUE,
remote = TRUE,
incoming = TRUE
)
devtools::check(
manual = TRUE,
remote = TRUE,
incoming = TRUE
)
devtools::check(
manual = TRUE,
remote = TRUE,
incoming = TRUE
)
library(FAIRmaterials)
process_ontology_files("/Users/jgordon/Library/CloudStorage/OneDrive-BowdoinCollege/Desktop/ontfolder/")
process_ontology_files("/Users/jgordon/Library/CloudStorage/OneDrive-BowdoinCollege/Desktop/ontfolder/")
process_ontology_files("/Users/jgordon/Library/CloudStorage/OneDrive-BowdoinCollege/Desktop/ontfolder/", include_valuetype = FALSE)
spell_check()
urlchecker::url_check()
spell_check()
devtools::check(
manual = TRUE,
remote = TRUE,
incoming = TRUE
)
process_ontology_files("/Users/jgordon/Library/CloudStorage/OneDrive-BowdoinCollege/Desktop/ontfolder/", update_missing = TRUE)
devtools::check(
manual = TRUE,
remote = TRUE,
incoming = TRUE
)
system.file("extdata", package = "FAIRmaterials")
devtools::check(
manual = TRUE,
remote = TRUE,
incoming = TRUE
)
devtools::check(
manual = TRUE,
remote = TRUE,
incoming = TRUE
)
devtools::check(
manual = TRUE,
remote = TRUE,
incoming = TRUE
)
library(FAIRmaterials)
devtools::check(
manual = TRUE,
remote = TRUE,
incoming = TRUE
)
devtools::check(
manual = TRUE,
remote = TRUE,
incoming = TRUE
)
spell_check()
check_mac_release()
devtools::check_win_release()
devtools::check_win_release()
check_mac_release()
devtools::check_win_release()
spell_check()
spell_check()
spell_check()
devtools::check(
manual = TRUE,
remote = TRUE,
incoming = TRUE
)
devtools::check_win_release()
devtools::check_win_release()
devtools::check(
manual = TRUE,
remote = TRUE,
incoming = TRUE
)
install.packages("Rtools")
install.packages("tools")
install.packages("tools")
install.packages("tools")
install.packages("tools")
devtools::check(
manual = TRUE,
remote = TRUE,
incoming = TRUE
)
devtools::check(
manual = TRUE,
remote = TRUE,
incoming = TRUE
)
process_ontology_files("/Users/jgordon/Downloads/rstudio-export/untitledfolder", update_missing = TRUE)
process_ontology_files("/Users/jgordon/Downloads/rstudio-export/untitledfolder")
process_ontology_files("/Users/jgordon/Downloads/rstudio-export/untitledfolder", add_external_onto_info = T)
devtools::check(
manual = TRUE,
remote = TRUE,
incoming = TRUE
)
spell_check()
library(devtool)
library(devtools)
spell_check()
spell_check()
devtools::check(
manual = TRUE,
remote = TRUE,
incoming = TRUE)
spell_check()
